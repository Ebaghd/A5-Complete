group_by(state) %>%
summarise(total = sum(total))
return(impact_on_states)
}
#state with most amount of injured and killed
most_impacted_state <- impact_on_states(shootings, shootings$state, shootings$total) %>%
filter(total == max(total))
#total number of injuries and killing per city
total_per_city <-  impact_on_cities(shootings, shootings$city, shootings$total)
#calculates number of people injured per city and month.
city_injured_summary <- shootings %>%
select(city, num_injured, date) %>%
mutate(date = sub(",", "", date))%>%
mutate(month = months(as.Date(date, format = "%B %d %Y" ))) %>%
group_by(city, month) %>%
summarise(num_injured = sum(num_injured))
#calculates number of people killed per city and month
city_killed_summary <- shootings %>%
select(city, num_killed, date) %>%
mutate(date = sub(",", "", date))%>%
mutate(month = months(as.Date(date, format = "%B %d %Y" ))) %>%
group_by(city, month) %>%
summarise(num_killed = sum(num_killed))
#summary table describing amount of people killed, injured, and the two combined for every month and city.
summarystuff <- merge(city_injured_summary, city_killed_summary) %>%
mutate(total_injured_and_killed = num_injured + num_killed)
#data plot by month
make_plot <- function(df, date, total_injured_and_killed){
make_plot <- impact_on_months(df, date, total_injured_and_killed)
ggplot(data = make_plot) +
geom_col(mapping = aes(x = month_of_shooting, y = total_injured_and_killed), fill = "green")
}
t <- make_plot(shootings, shootings$date, shootings$total)
#interactive map
interactive_map <- function(df, lat, long, total){
leaflet(data = df) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -96.4247, lat = 31.51073, zoom = 4) %>%
addCircles(
lat = lat,
lng = long,
stroke = FALSE,
popup = total
)
}
plzwork <- interactive_map(shootings, shootings$lat, shootings$long, shootings$total)
plzwork
library(dplyr)
library(leaflet)
library(ggplot2)
library(shiny)
shootings <- read.csv("shootings-2018.csv", stringsAsFactors = FALSE)
#number of shootings recorded
numShootings <- nrow(shootings)
#number of people who died in shootings
numDied <- sum(shootings$num_killed)
#sum of those who died and were injured for every shooting recorded in data set
shootings <- mutate(shootings, total = num_injured + num_killed)
#function for finding amount of people and killed per city
impact_on_cities <- function(df, city, total){
ks <- df %>%
select(city, total) %>%
group_by(city) %>%
summarise(num_total = sum(total)) %>%
return(ks)
}
#city with the most amount of injuries and killings
most_impacted_city <- impact_on_cities(shootings, shootings$city, shootings$total) %>%
filter(city_total == max(city_total))
#function for calculating amount of people killed per month
impact_on_months <- function(df, date, total){
impact_on_months <- df %>%
select(date, total) %>%
mutate(date = sub(",", "", date))%>%
mutate(month_of_shooting = months(as.Date(date, format = "%B %d %Y" ))) %>%
group_by(month_of_shooting) %>%
summarise(total_injured_and_killed = sum(total))
return(impact_on_months)
}
#month with most amount of killings and injuries
Most_Impacted_month <- impact_on_months(shootings, shootings$date, shootings$total) %>%
filter(total == max(total))
#function to calculate amount of injured and killed per  state
impact_on_states <- function(df, state, total){
impact_on_states <- shootings %>%
select(state, total) %>%
group_by(state) %>%
summarise(total = sum(total))
return(impact_on_states)
}
#state with most amount of injured and killed
most_impacted_state <- impact_on_states(shootings, shootings$state, shootings$total) %>%
filter(total == max(total))
#total number of injuries and killing per city
total_per_city <-  impact_on_cities(shootings, shootings$city, shootings$total)
#calculates number of people injured per city and month.
city_injured_summary <- shootings %>%
select(city, num_injured, date) %>%
mutate(date = sub(",", "", date))%>%
mutate(month = months(as.Date(date, format = "%B %d %Y" ))) %>%
group_by(city, month) %>%
summarise(num_injured = sum(num_injured))
#calculates number of people killed per city and month
city_killed_summary <- shootings %>%
select(city, num_killed, date) %>%
mutate(date = sub(",", "", date))%>%
mutate(month = months(as.Date(date, format = "%B %d %Y" ))) %>%
group_by(city, month) %>%
summarise(num_killed = sum(num_killed))
#summary table describing amount of people killed, injured, and the two combined for every month and city.
summarystuff <- merge(city_injured_summary, city_killed_summary) %>%
mutate(total_injured_and_killed = num_injured + num_killed)
#data plot by month
make_plot <- function(df, date, total_injured_and_killed){
make_plot <- impact_on_months(df, date, total_injured_and_killed)
ggplot(data = make_plot) +
geom_col(mapping = aes(x = month_of_shooting, y = total_injured_and_killed), fill = "green")
}
t <- make_plot(shootings, shootings$date, shootings$total)
#interactive map
interactive_map <- function(df, lat, long, total){
leaflet(data = df) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -90, lat = 31.51073, zoom = 4) %>%
addCircles(
lat = lat,
lng = long,
stroke = FALSE,
popup = total
)
}
plzwork <- interactive_map(shootings, shootings$lat, shootings$long, shootings$total)
plzwork
library(dplyr)
library(leaflet)
library(ggplot2)
library(shiny)
shootings <- read.csv("shootings-2018.csv", stringsAsFactors = FALSE)
#number of shootings recorded
numShootings <- nrow(shootings)
#number of people who died in shootings
numDied <- sum(shootings$num_killed)
#sum of those who died and were injured for every shooting recorded in data set
shootings <- mutate(shootings, total = num_injured + num_killed)
#function for finding amount of people and killed per city
impact_on_cities <- function(df, city, total){
ks <- df %>%
select(city, total) %>%
group_by(city) %>%
summarise(num_total = sum(total)) %>%
return(ks)
}
#city with the most amount of injuries and killings
most_impacted_city <- impact_on_cities(shootings, shootings$city, shootings$total) %>%
filter(city_total == max(city_total))
#function for calculating amount of people killed per month
impact_on_months <- function(df, date, total){
impact_on_months <- df %>%
select(date, total) %>%
mutate(date = sub(",", "", date))%>%
mutate(month_of_shooting = months(as.Date(date, format = "%B %d %Y" ))) %>%
group_by(month_of_shooting) %>%
summarise(total_injured_and_killed = sum(total))
return(impact_on_months)
}
#month with most amount of killings and injuries
Most_Impacted_month <- impact_on_months(shootings, shootings$date, shootings$total) %>%
filter(total == max(total))
#function to calculate amount of injured and killed per  state
impact_on_states <- function(df, state, total){
impact_on_states <- shootings %>%
select(state, total) %>%
group_by(state) %>%
summarise(total = sum(total))
return(impact_on_states)
}
#state with most amount of injured and killed
most_impacted_state <- impact_on_states(shootings, shootings$state, shootings$total) %>%
filter(total == max(total))
#total number of injuries and killing per city
total_per_city <-  impact_on_cities(shootings, shootings$city, shootings$total)
#calculates number of people injured per city and month.
city_injured_summary <- shootings %>%
select(city, num_injured, date) %>%
mutate(date = sub(",", "", date))%>%
mutate(month = months(as.Date(date, format = "%B %d %Y" ))) %>%
group_by(city, month) %>%
summarise(num_injured = sum(num_injured))
#calculates number of people killed per city and month
city_killed_summary <- shootings %>%
select(city, num_killed, date) %>%
mutate(date = sub(",", "", date))%>%
mutate(month = months(as.Date(date, format = "%B %d %Y" ))) %>%
group_by(city, month) %>%
summarise(num_killed = sum(num_killed))
#summary table describing amount of people killed, injured, and the two combined for every month and city.
summarystuff <- merge(city_injured_summary, city_killed_summary) %>%
mutate(total_injured_and_killed = num_injured + num_killed)
#data plot by month
make_plot <- function(df, date, total_injured_and_killed){
make_plot <- impact_on_months(df, date, total_injured_and_killed)
ggplot(data = make_plot) +
geom_col(mapping = aes(x = month_of_shooting, y = total_injured_and_killed), fill = "green")
}
t <- make_plot(shootings, shootings$date, shootings$total)
#interactive map
interactive_map <- function(df, lat, long, total){
leaflet(data = df) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -96.4247, lat = 40.51073, zoom = 4) %>%
addCircles(
lat = lat,
lng = long,
stroke = FALSE,
popup = total
)
}
plzwork <- interactive_map(shootings, shootings$lat, shootings$long, shootings$total)
plzwork
library(dplyr)
library(leaflet)
library(ggplot2)
library(shiny)
shootings <- read.csv("shootings-2018.csv", stringsAsFactors = FALSE)
#number of shootings recorded
numShootings <- nrow(shootings)
#number of people who died in shootings
numDied <- sum(shootings$num_killed)
#sum of those who died and were injured for every shooting recorded in data set
shootings <- mutate(shootings, total = num_injured + num_killed)
#function for finding amount of people and killed per city
impact_on_cities <- function(df, city, total){
ks <- df %>%
select(city, total) %>%
group_by(city) %>%
summarise(num_total = sum(total)) %>%
return(ks)
}
#city with the most amount of injuries and killings
most_impacted_city <- impact_on_cities(shootings, shootings$city, shootings$total) %>%
filter(city_total == max(city_total))
#function for calculating amount of people killed per month
impact_on_months <- function(df, date, total){
impact_on_months <- df %>%
select(date, total) %>%
mutate(date = sub(",", "", date))%>%
mutate(month_of_shooting = months(as.Date(date, format = "%B %d %Y" ))) %>%
group_by(month_of_shooting) %>%
summarise(total_injured_and_killed = sum(total))
return(impact_on_months)
}
#month with most amount of killings and injuries
Most_Impacted_month <- impact_on_months(shootings, shootings$date, shootings$total) %>%
filter(total == max(total))
#function to calculate amount of injured and killed per  state
impact_on_states <- function(df, state, total){
impact_on_states <- shootings %>%
select(state, total) %>%
group_by(state) %>%
summarise(total = sum(total))
return(impact_on_states)
}
#state with most amount of injured and killed
most_impacted_state <- impact_on_states(shootings, shootings$state, shootings$total) %>%
filter(total == max(total))
#total number of injuries and killing per city
total_per_city <-  impact_on_cities(shootings, shootings$city, shootings$total)
#calculates number of people injured per city and month.
city_injured_summary <- shootings %>%
select(city, num_injured, date) %>%
mutate(date = sub(",", "", date))%>%
mutate(month = months(as.Date(date, format = "%B %d %Y" ))) %>%
group_by(city, month) %>%
summarise(num_injured = sum(num_injured))
#calculates number of people killed per city and month
city_killed_summary <- shootings %>%
select(city, num_killed, date) %>%
mutate(date = sub(",", "", date))%>%
mutate(month = months(as.Date(date, format = "%B %d %Y" ))) %>%
group_by(city, month) %>%
summarise(num_killed = sum(num_killed))
#summary table describing amount of people killed, injured, and the two combined for every month and city.
summarystuff <- merge(city_injured_summary, city_killed_summary) %>%
mutate(total_injured_and_killed = num_injured + num_killed)
#data plot by month
make_plot <- function(df, date, total_injured_and_killed){
make_plot <- impact_on_months(df, date, total_injured_and_killed)
ggplot(data = make_plot) +
geom_col(mapping = aes(x = month_of_shooting, y = total_injured_and_killed), fill = "green")
}
t <- make_plot(shootings, shootings$date, shootings$total)
#interactive map
interactive_map <- function(df, lat, long, total){
leaflet(data = df) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -96.4247, lat = 35.51073, zoom = 4) %>%
addCircles(
lat = lat,
lng = long,
stroke = FALSE,
popup = total
)
}
plzwork <- interactive_map(shootings, shootings$lat, shootings$long, shootings$total)
plzwork
library(dplyr)
library(leaflet)
library(ggplot2)
library(shiny)
shootings <- read.csv("shootings-2018.csv", stringsAsFactors = FALSE)
#number of shootings recorded
numShootings <- nrow(shootings)
#number of people who died in shootings
numDied <- sum(shootings$num_killed)
#sum of those who died and were injured for every shooting recorded in data set
shootings <- mutate(shootings, total = num_injured + num_killed)
#function for finding amount of people and killed per city
impact_on_cities <- function(df, city, total){
ks <- df %>%
select(city, total) %>%
group_by(city) %>%
summarise(num_total = sum(total)) %>%
return(ks)
}
#city with the most amount of injuries and killings
most_impacted_city <- impact_on_cities(shootings, shootings$city, shootings$total) %>%
filter(city_total == max(city_total))
#function for calculating amount of people killed per month
impact_on_months <- function(df, date, total){
impact_on_months <- df %>%
select(date, total) %>%
mutate(date = sub(",", "", date))%>%
mutate(month_of_shooting = months(as.Date(date, format = "%B %d %Y" ))) %>%
group_by(month_of_shooting) %>%
summarise(total_injured_and_killed = sum(total))
return(impact_on_months)
}
#month with most amount of killings and injuries
Most_Impacted_month <- impact_on_months(shootings, shootings$date, shootings$total) %>%
filter(total == max(total))
#function to calculate amount of injured and killed per  state
impact_on_states <- function(df, state, total){
impact_on_states <- shootings %>%
select(state, total) %>%
group_by(state) %>%
summarise(total = sum(total))
return(impact_on_states)
}
#state with most amount of injured and killed
most_impacted_state <- impact_on_states(shootings, shootings$state, shootings$total) %>%
filter(total == max(total))
#total number of injuries and killing per city
total_per_city <-  impact_on_cities(shootings, shootings$city, shootings$total)
#calculates number of people injured per city and month.
city_injured_summary <- shootings %>%
select(city, num_injured, date) %>%
mutate(date = sub(",", "", date))%>%
mutate(month = months(as.Date(date, format = "%B %d %Y" ))) %>%
group_by(city, month) %>%
summarise(num_injured = sum(num_injured))
#calculates number of people killed per city and month
city_killed_summary <- shootings %>%
select(city, num_killed, date) %>%
mutate(date = sub(",", "", date))%>%
mutate(month = months(as.Date(date, format = "%B %d %Y" ))) %>%
group_by(city, month) %>%
summarise(num_killed = sum(num_killed))
#summary table describing amount of people killed, injured, and the two combined for every month and city.
summarystuff <- merge(city_injured_summary, city_killed_summary) %>%
mutate(total_injured_and_killed = num_injured + num_killed)
#data plot by month
make_plot <- function(df, date, total_injured_and_killed){
make_plot <- impact_on_months(df, date, total_injured_and_killed)
ggplot(data = make_plot) +
geom_col(mapping = aes(x = month_of_shooting, y = total_injured_and_killed), fill = "green")
}
t <- make_plot(shootings, shootings$date, shootings$total)
#interactive map
interactive_map <- function(df, lat, long, total){
leaflet(data = df) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -96.4247, lat = 35.51073, zoom = 4) %>%
addCircles(
lat = lat,
lng = long,
stroke = FALSE,
popup = "in this shooting" + total + "people were injured and/or killed"
)
}
plzwork <- interactive_map(shootings, shootings$lat, shootings$long, shootings$total)
library(dplyr)
library(leaflet)
library(ggplot2)
library(shiny)
shootings <- read.csv("shootings-2018.csv", stringsAsFactors = FALSE)
#number of shootings recorded
numShootings <- nrow(shootings)
#number of people who died in shootings
numDied <- sum(shootings$num_killed)
#sum of those who died and were injured for every shooting recorded in data set
shootings <- mutate(shootings, total = num_injured + num_killed)
#function for finding amount of people and killed per city
impact_on_cities <- function(df, city, total){
ks <- df %>%
select(city, total) %>%
group_by(city) %>%
summarise(num_total = sum(total)) %>%
return(ks)
}
#city with the most amount of injuries and killings
most_impacted_city <- impact_on_cities(shootings, shootings$city, shootings$total) %>%
filter(city_total == max(city_total))
#function for calculating amount of people killed per month
impact_on_months <- function(df, date, total){
impact_on_months <- df %>%
select(date, total) %>%
mutate(date = sub(",", "", date))%>%
mutate(month_of_shooting = months(as.Date(date, format = "%B %d %Y" ))) %>%
group_by(month_of_shooting) %>%
summarise(total_injured_and_killed = sum(total))
return(impact_on_months)
}
#month with most amount of killings and injuries
Most_Impacted_month <- impact_on_months(shootings, shootings$date, shootings$total) %>%
filter(total == max(total))
#function to calculate amount of injured and killed per  state
impact_on_states <- function(df, state, total){
impact_on_states <- shootings %>%
select(state, total) %>%
group_by(state) %>%
summarise(total = sum(total))
return(impact_on_states)
}
#state with most amount of injured and killed
most_impacted_state <- impact_on_states(shootings, shootings$state, shootings$total) %>%
filter(total == max(total))
#total number of injuries and killing per city
total_per_city <-  impact_on_cities(shootings, shootings$city, shootings$total)
#calculates number of people injured per city and month.
city_injured_summary <- shootings %>%
select(city, num_injured, date) %>%
mutate(date = sub(",", "", date))%>%
mutate(month = months(as.Date(date, format = "%B %d %Y" ))) %>%
group_by(city, month) %>%
summarise(num_injured = sum(num_injured))
#calculates number of people killed per city and month
city_killed_summary <- shootings %>%
select(city, num_killed, date) %>%
mutate(date = sub(",", "", date))%>%
mutate(month = months(as.Date(date, format = "%B %d %Y" ))) %>%
group_by(city, month) %>%
summarise(num_killed = sum(num_killed))
#summary table describing amount of people killed, injured, and the two combined for every month and city.
summarystuff <- merge(city_injured_summary, city_killed_summary) %>%
mutate(total_injured_and_killed = num_injured + num_killed)
#data plot by month
make_plot <- function(df, date, total_injured_and_killed){
make_plot <- impact_on_months(df, date, total_injured_and_killed)
ggplot(data = make_plot) +
geom_col(mapping = aes(x = month_of_shooting, y = total_injured_and_killed), fill = "green")
}
t <- make_plot(shootings, shootings$date, shootings$total)
#interactive map
interactive_map <- function(df, lat, long, total){
leaflet(data = df) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -96.4247, lat = 35.51073, zoom = 4) %>%
addCircles(
lat = lat,
lng = long,
stroke = FALSE,
popup = paste("in this shooting", total, "people were injured and/or killed")
)
}
plzwork <- interactive_map(shootings, shootings$lat, shootings$long, shootings$total)
plzwork
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
#US Mass Shooting Data Report
##Summary Information
# US Mass Shooting Data Report
## Summary Information
library(knitr)
lirary(rmarkdown)
library(rmarkdown)
shootings <- read.csv(data/"shootings-2018.csv", stringsAsFactors = FALSE)
shootings <- read.csv(data/"shootings-2018.csv", stringsAsFactors = FALSE)
setwd()
getwd()
setwd(a5-b-Ebaghd)
setwd("a5-b-Ebaghd")
library(dplyr)
library(leaflet)
library(ggplot2)
library(shiny)
shootings <- read.csv("data/shootings-2018.csv", stringsAsFactors = FALSE)
library(dplyr)
library(leaflet)
library(ggplot2)
library(shiny)
shootings <- read.csv("data/shootings-2018.csv", stringsAsFactors = FALSE)
library(dplyr)
library(leaflet)
library(ggplot2)
library(shiny)
shootings <- read.csv("shootings-2018.csv", stringsAsFactors = FALSE)
#number of shootings recorded
num_shootings <- nrow(shootings)
